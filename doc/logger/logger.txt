*******************************************************************************
BETA DOCUMENTATION. NOT ALL FUNCTIONALITY OR OPTIONS HAVE BEEN IMPLEMENTED.
THOSE MAY BE CHANGED, REMOVED OR EVEN MORE ADDED IN THE RELEASE VERSION.
*******************************************************************************

			        L O G G E R

                   general boot message logging system

-------------------------------------------------------------------------------

Logger consists of a pair of programs that use various methods to capture text
during the system boot process and during usage until disabled. The first
program is LOGGER.SYS. It is a device driver that gets loaded in the system
config file and performs the actual logging. The second program is an
interface program called LOGGER.COM. It is used to communicate with the device
driver. The interface program can view and perform other actions on the log
when the driver is loaded.

see TO-DO for known and potential future features.

*******************************************************************************

LOGGER.SYS [XMS | UMB | LOW] [COLOR | MONO] [JAM] [size]

	XMS	Try XMS for log data storage.
	UMB	Try upper memory for log storage.
	LOW	Try lower memory for log storage.

	COLOR	Record color attributes associated with log text.
	MONO	Only record log text (doubles log capacity).

	JAM	Stop recording if log is full. Normally if the buffer becomes
		full, older logged text is discarded to make room.

	size	Amount of memory to allocate for log in kilobytes (1-65535).

Most options only require their first letter, for example X is short XMS. All
parameters must be separated by one or more SPACE, COMMA or SEMI-COLON
characters.

The placement of the XMS, UMB and LOW options is very important. The attempt
to allocate a buffer occurs when one of those options is encountered and uses
the current settings. When no options are provided, the device driver will use:

256 COLOR XMS 16 MONO UMB 16 MONO LOW

This will cause the driver to first try to allocate a 256K XMS buffer using
color capture mode. If that does not succeed, it will continue with next series
of options.

The JAM option will apply to all logging regardless of which buffer gets
allocated or its position in the option list.

The number of pages that can be stored per KB can very widely based on the
text being logged. In monochrome mode, it could range from about 0.5 to 512
pages. Generally, you can expect about 1 page per KB.

Logging to UMB or LOW memory will increase the drivers memory footprint by
roughly 100 bytes.

When logging to UMB, the driver will attempt to allocate memory using different
methods. First, it will attempt to create the LOG storage buffer using DOS
functions for compatibility with the system's CONFIG setting "DOS=UMB". If this
does not succeed, it will try using the extended memory driver to directly
allocate buffer space.

EXAMPLES:

DEVICEHIGH=C:\DOS\LOGGER.SYS
DEVICEHIGH=C:\DOS\LOGGER.SYS C,2048,X; 256,X; 128,M,X; 64,C,U; M,16,U; L,16
DEVICEHIGH=C:\DOS\LOGGER.SYS JAM COLOR 32 UMB MONO 16 UMB
DEVICEHIGH=C:\DOS\LOGGER.SYS color 32 UMB, mono 16 UMB, 8 LOW; JAM
DEVICE=C:\DOS\LOGGER.SYS m,8 low

(Although the comma and semi-colon function as parameter separators, they can
be considered decorations that can help with reading and editin a long series
of command line options.)

-------------------------------------------------------------------------------

LOGGER.COM [ ON | OFF ] [ PRINT | ANSI | VIEW | CLEAR | MESSAGE text ]

Options to override or change the state of logging:

	ON		Force logging on when finished.
	OFF		Leave logging disabled when finished.

Options that leave logging disabled unless overridden:

	CLEAR		Empty the log.
	PRINT		Output the log text to STDOUT.
	ANSI		Like PRINT, but includes ANSI color sequences.

Options that will return logging to its previous state:

	VERSION		Display version information.
	HELP		Display this help text.
	INFORMATION	Display some status information about the driver.
	VIEW		View the log.
	MESSAGE text	Add the remaining command line as text to the log.
	SNAPSHOT	Store a snapshot of the screen in the log.
	THRU		Pass any STDIN text back out through STDOUT.

Options must be separated by one or more SPACE, COMMA or SEMI-COLON characters.
Most options only require their first letter, for example C is short CLEAR. The
exceptions are ON and OFF which must be specified in their entirety.

LOGGER always disables logging when executed. Based on the options provided on
the command line, logging may or may not be enabled when the program finishes
interfacing with the device driver. The state of logging when finished can be
overriden by using the OFF and ON options.

Any redirected text waiting in the standard input buffer will automatically be
added to the Log. If there were not options specified, the interface program
will exit after appending the Log.

If no options are provided and there is no redirected text waiting, the default
behaviour is to VIEW the log.

While viewing the log, the following keystrokes are supported:

	ESACPE		Exit. (Also, ENTER/RETURN will exit)
	ARROW KEYS	General navigation.
	PAGE UP/DOWN	Scroll Up or Down a page at a time.
	HOME		Move to beginning.
	END		Page Down to the end.
	CTRL+LEFT	Move to the leftmost column.
	CTRL+RIGHT	Move to the rightmost column of the longest line on
			the display.

The viewer does not automatically wrap text that exceeds the display width of
the screen. In video modes that are not supported by advanced capturing, the
logged text can exceed the screen width. Regardless of the capture method, any
text that is added through I/O redirection or the MESSAGE option can also
exceed the screen width.

The RIGHT arrow key will only shift the display right when there is a line
displayed on the screen that contains additional information beyond the width
of the display.

*******************************************************************************

BSD 3-Clause License

Copyright (c) 2023, Jerome Shidel
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
   list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its
   contributors may be used to endorse or promote products derived from
   this software without specific prior written permission.


THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
